{
	"name": "OV20",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "datapipeline_blob_storage",
						"type": "LinkedServiceReference"
					},
					"name": "ov20csv",
					"description": "Import OV20 csv"
				},
				{
					"linkedService": {
						"referenceName": "datapipeline_blob_storage",
						"type": "LinkedServiceReference"
					},
					"name": "ov15csv2",
					"description": "Import OV15 csv from datapipeline_blob_storage"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSql_Kadaster_Input_Table",
						"type": "DatasetReference"
					},
					"name": "KadasterSQLTable",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorageLogs",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select1",
					"description": "Select necessary columns only"
				},
				{
					"name": "CreateColumn",
					"description": "Create House_number_add column"
				},
				{
					"name": "WonenDwellingType",
					"description": "Filtering WONEN assets"
				},
				{
					"name": "union1"
				},
				{
					"name": "window1"
				},
				{
					"name": "EditColumns",
					"description": "Edit coordinates, add Source column"
				},
				{
					"name": "select3",
					"description": "Select necessary columns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OVER_BEW_K as string,",
				"          STUK_ONTV_DATUM as string,",
				"          OVER_STUK as string,",
				"          VV_NAAM as string,",
				"          VV_WOONPLAATS as string,",
				"          NNP_VV_K as string,",
				"          VK_NAAM as string,",
				"          VK_WOONPLAATS as string,",
				"          NNP_VK_K as string,",
				"          OBJE_MUT_SRT_K as string,",
				"          IND_FAM_TRANS as string,",
				"          OBJE_OBJEKT as string,",
				"          KAD_GEM as string,",
				"          SECTIE as string,",
				"          PERCEELNR as string,",
				"          INDEXLT as string,",
				"          INDEXNR as string,",
				"          OBJE_GROOTTE as integer,",
				"          OBJE_KOOP_SOM as integer,",
				"          OBJE_IND_MEER_O_G as string,",
				"          OBJE_BURG_GEM_NR as string,",
				"          OBJE_BURG_GEM_NAAM as string,",
				"          OBJE_KULT_ONGEB_K as string,",
				"          ZAKR_ZR_K as string,",
				"          OBJB_OBJ_BEL_K as string,",
				"          OBJE_X_COORD as float,",
				"          OBJE_Y_COORD as float,",
				"          OBJE_KULT_TEXT as string,",
				"          OBJA_KULT_GEB_K as string,",
				"          OBJA_PLTS_NAAM as string,",
				"          OBJA_STRAAT as string,",
				"          OBJA_HUIS_NR as integer,",
				"          OBJA_HUIS_LR as string,",
				"          OBJA_TOEVOEGING as string,",
				"          OBJA_PTT_K as string,",
				"          PHT as string,",
				"          OVER_ID as string,",
				"          BAG_ID as string",
				"     ),",
				"     useSchema: true,",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'data-pipeline-input-files',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['nl/kadaster/to_upload/Catella_OV20*.csv']) ~> ov20csv",
				"source(output(",
				"          DATUM as string,",
				"          PTT_K as string,",
				"          PLTSNAAM as string,",
				"          STRAAT as string,",
				"          HUISNR as integer,",
				"          TOEV as string,",
				"          WONINGTYPE as string,",
				"          X_COORD as float,",
				"          Y_COORD as float,",
				"          KULT_GEB_K as string,",
				"          GROOTTE as integer,",
				"          K_SOM as integer,",
				"          IND_M_O_G as string,",
				"          ZAK_R as string,",
				"          KULT_TEKST as string,",
				"          OBJ_BEL as string,",
				"          ERFDIENSTBH as string,",
				"          KULT_GEB_K1 as string,",
				"          KULT_ONGEB_K1 as string,",
				"          INDEX_LR1 as string,",
				"          GROOTTE1 as string,",
				"          PTT_K1 as string,",
				"          PLTSNAAM1 as string,",
				"          STRAAT1 as string,",
				"          HUISNR1 as string,",
				"          TOEV1 as string,",
				"          KULT_GEB_K2 as string,",
				"          KULT_ONGEB_K2 as string,",
				"          INDEX_LR2 as string,",
				"          GROOTTE2 as string,",
				"          PTT_K2 as string,",
				"          PLTSNAAM2 as string,",
				"          STRAAT2 as string,",
				"          HUISNR2 as string,",
				"          TOEV2 as string,",
				"          KULT_GEB_K3 as string,",
				"          KULT_ONGEB_K3 as string,",
				"          INDEX_LR3 as string,",
				"          GROOTTE3 as string,",
				"          PTT_K3 as string,",
				"          PLTSNAAM3 as string,",
				"          STRAAT3 as string,",
				"          HUISNR3 as string,",
				"          TOEV3 as string,",
				"          KULT_GEB_K4 as string,",
				"          KULT_ONGEB_K4 as string,",
				"          INDEX_LR4 as string,",
				"          GROOTTE4 as string,",
				"          PTT_K4 as string,",
				"          PLTSNAAM4 as string,",
				"          STRAAT4 as string,",
				"          HUISNR4 as string,",
				"          TOEV4 as string,",
				"          IND_HUURDER as string,",
				"          BEWARINGKODE as string,",
				"          STUK_ID as string,",
				"          MUT_SRT as string,",
				"          BURGEM_NR as string,",
				"          OBJECT as string,",
				"          NNP_1E_VERKR as string,",
				"          NNP_1E_VERVR as string,",
				"          FAM_TRANS as string,",
				"          PHT as string,",
				"          KAD_GEM as string,",
				"          SECTIE as string,",
				"          BAG_ID as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'data-pipeline-input-files',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['nl/kadaster/to_upload/Catella_OV15_*.csv']) ~> ov15csv2",
				"CreateColumn select(mapColumn(",
				"          Date = STUK_ONTV_DATUM,",
				"          Area = OBJE_GROOTTE,",
				"          Price = OBJE_KOOP_SOM,",
				"          Latitude = OBJE_X_COORD,",
				"          Longitude = OBJE_Y_COORD,",
				"          Object_description = OBJE_KULT_TEXT,",
				"          Object = OBJE_OBJEKT,",
				"          City = OBJA_PLTS_NAAM,",
				"          Street = OBJA_STRAAT,",
				"          House_number = OBJA_HUIS_NR,",
				"          House_number_add,",
				"          Postcode = OBJA_PTT_K,",
				"          BAG_ID,",
				"          Source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"WonenDwellingType derive(House_number_add = iifNull(OBJA_TOEVOEGING, OBJA_HUIS_LR),",
				"          OBJE_X_COORD = OBJE_X_COORD / 10000,",
				"          OBJE_Y_COORD = OBJE_Y_COORD / 10000,",
				"          Source = \"OV20\") ~> CreateColumn",
				"ov20csv filter(regexMatch(OBJE_KULT_TEXT, 'WONEN')) ~> WonenDwellingType",
				"select1, select3 union(byName: true)~> union1",
				"union1 window(over(BAG_ID),",
				"     asc(Area, false),",
				"     BAG_ID_rank = rank()) ~> window1",
				"ov15csv2 derive(X_COORD = X_COORD / 10000,",
				"          Y_COORD = Y_COORD / 10000,",
				"          Source = \"OV15\") ~> EditColumns",
				"EditColumns select(mapColumn(",
				"          Date = DATUM,",
				"          Area = GROOTTE,",
				"          Price = K_SOM,",
				"          Latitude = X_COORD,",
				"          Longitude = Y_COORD,",
				"          Object_description = KULT_TEKST,",
				"          Object = OBJECT,",
				"          City = PLTSNAAM,",
				"          Street = STRAAT,",
				"          House_number = HUISNR,",
				"          House_number_add = TOEV,",
				"          Postcode = PTT_K,",
				"          BAG_ID,",
				"          Source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OVER_BEW_K as string,",
				"          STUK_ONTV_DATUM as string,",
				"          OVER_STUK as string,",
				"          VV_NAAM as string,",
				"          VV_WOONPLAATS as string,",
				"          NNP_VV_K as string,",
				"          VK_NAAM as string,",
				"          VK_WOONPLAATS as string,",
				"          NNP_VK_K as string,",
				"          OBJE_MUT_SRT_K as string,",
				"          IND_FAM_TRANS as string,",
				"          OBJE_OBJEKT as string,",
				"          KAD_GEM as string,",
				"          SECTIE as string,",
				"          PERCEELNR as string,",
				"          INDEXLT as string,",
				"          INDEXNR as string,",
				"          OBJE_GROOTTE as string,",
				"          OBJE_KOOP_SOM as string,",
				"          OBJE_IND_MEER_O_G as string,",
				"          OBJE_BURG_GEM_NR as string,",
				"          OBJE_BURG_GEM_NAAM as string,",
				"          OBJE_KULT_ONGEB_K as string,",
				"          ZAKR_ZR_K as string,",
				"          OBJB_OBJ_BEL_K as string,",
				"          OBJE_X_COORD as string,",
				"          OBJE_Y_COORD as string,",
				"          OBJE_KULT_TEXT as string,",
				"          OBJA_KULT_GEB_K as string,",
				"          OBJA_PLTS_NAAM as string,",
				"          OBJA_STRAAT as string,",
				"          OBJA_HUIS_NR as string,",
				"          OBJA_HUIS_LR as string,",
				"          OBJA_TOEVOEGING as string,",
				"          OBJA_PTT_K as string,",
				"          PHT as string,",
				"          OVER_ID as string,",
				"          BAG_ID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'allErrors',",
				"     outputRejectedData: true,",
				"     rejectedData_container: 'data-pipeline-input-files',",
				"     rejectedData_folderPath: 'nl/kadaster/logs',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          AanmeldDatum = Date,",
				"          Area,",
				"          Price,",
				"          Latitude,",
				"          Longitude,",
				"          Object_description,",
				"          City,",
				"          Street,",
				"          HouseNumber = House_number,",
				"          HouseNumberAddition = House_number_add,",
				"          ZipCode = Postcode,",
				"          BAG_ID,",
				"          BAG_ID_rank,",
				"          Object,",
				"          Source",
				"     )) ~> KadasterSQLTable"
			]
		}
	}
}